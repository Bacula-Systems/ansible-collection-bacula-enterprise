---
- hosts: "{{ client_hostname }}"
  tasks:
  - name: Install File Daemon, if not installed
    import_role:
      name: bacula.bacula_enterprise.bee_fdonly
  - name: Install Plugin dependencies
    import_role:
      name: bacula.bacula_enterprise.bee_plugindependencies
  - name: Install the File Daemon Plugin
    import_role:
      name: bacula.bacula_enterprise.bee_fdplugin

- hosts: localhost
  tasks:
  - name: fail following tasks if director_name or director_hostname is not defined
    fail: msg="director_hostname not provided, skipping remote Director configuration."
    when: director_hostname is not defined

- hosts: "{{ director_hostname }}"
  remote_user: root
  tasks:
  - name: Set client_name based on client_hostname if client_name is not defined
    set_fact:
      client_name: "{{ client_hostname.split('.')[0] }}-fd"
    when: client_name is not defined

  - name: get the Catalog name used by the Director
    shell: "grep 'Catalog {' /opt/bacula/etc/bacula-dir.conf -A 1 -m 1 | grep Name | tr -d ' ' | cut -d \"=\" -f2"
    register: catalog_name

  - name: set the catalog_name value
    set_fact:
      catalog_name: "{{ catalog_name.stdout }}"

  - name: get the first JobDefs resource name used in the bacula-dir.conf configuration file
    shell: "grep 'JobDefs {' /opt/bacula/etc/bacula-dir.conf -A 1 -m 1 | grep Name | tr -d ' ' | cut -d \"=\" -f2"
    register: jobdefs_name

  - name: set the jobdefs_name value
    set_fact:
      jobdefs_name: "{{ jobdefs_name.stdout }}"

  - name: generate the jobs and filesets definitions to be included in the bacula-dir.conf file
    template:
      src: "/root/.ansible/collections/ansible_collections/bacula/bacula_enterprise/roles/bee_fdplugin/templates/{{ fdplugin }}_jobs_filesets.j2"
      dest: "/opt/bacula/etc/conf.d/director/{{ client_name }}-{{ fdplugin }}_jobs_filesets.conf"
      owner: root
      group: bacula
      mode: '0660'
    ignore_errors: yes

  - name: reload Director configuration
    shell: echo "reload" | /opt/bacula/bin/bconsole
    register: reload_result
  - debug:  msg="{{ reload_result.stdout.split('\n') }}"
  - debug:  msg="{{ reload_result.stderr.split('\n') }}"

  - name: status client in Director
    shell: echo "status client={{ client_name }}" | /opt/bacula/bin/bconsole
    register: status_result
  - debug:  msg="{{ status_result.stdout.split('\n') }}"
  - debug:  msg="{{ status_result.stderr.split('\n') }}"
