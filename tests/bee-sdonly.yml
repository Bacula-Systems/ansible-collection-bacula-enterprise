---
- hosts: "{{ storage_hostname }}"
  tasks:

  - name: Install the Storage Daemon only
    import_role:
      name: bacula.bacula_enterprise.bee_sdonly

  - name: get the Storage Daemon password used to communicate with Director in the bacula-sd.conf file, we will use the same
    shell: "grep ^[[:space:]]*Password -m 1 /opt/bacula/etc/bacula-sd.conf | tr -d ' ' | tr -d '\"' | cut -d \"=\" -f2"
    register: current_sd_password

  - name: set the dir_sd_password
    set_fact:
      current_sd_password: "{{ current_sd_password.stdout }}"
  - debug: msg="{{ current_sd_password }}"

- hosts: localhost
  tasks:
  - name: fail following tasks if director_hostname is not defined
    fail: msg="director_hostname not provided, skipping remote Director configuration."
    when: director_hostname is not defined

- hosts: "{{ director_hostname }}"
  gather_facts:  yes
  tasks:

  - name: Set storage_name based on storage_hostname if storage_name is not defined
    set_fact:
      storage_name: "{{ storage_hostname.split('.')[0] }}-sd"
    when: storage_name is not defined

  - name: get the dir_sd_password
    set_fact:
      dir_sd_password: "{{ hostvars[storage_hostname].current_sd_password }}"

  - name: generate the autochanger resource definition to be included in the bacula-dir.conf file
    template:
      src: "/root/.ansible/collections/ansible_collections/bacula/bacula_enterprise/roles/bee_sdonly/templates/autochanger_conf_in_bacula_dir.j2"
      dest: "/opt/bacula/etc/conf.d/director/{{ storage_name }}-autochanger.conf"
      owner: bacula
      group: bacula
      mode: '0660'

  - name: reload Director configuration
    shell: echo "reload" | /opt/bacula/bin/bconsole
    register: reload_result
  - debug:  msg="{{ reload_result.stdout.split('\n') }}"
  - debug:  msg="{{ reload_result.stderr.split('\n') }}"

  - name: status storage in Director
    shell: echo "status storage={{ storage_name }}-autochanger" | /opt/bacula/bin/bconsole
    register: status_result
  - debug:  msg="{{ status_result.stdout.split('\n') }}"
  - debug:  msg="{{ status_result.stderr.split('\n') }}"

  - name: display any message in bconsole
    shell: echo "messages" | /opt/bacula/bin/bconsole
    register: status_messages
  - debug:  msg="{{ status_messages.stdout.split('\n') }}"
  - debug:  msg="{{ status_messages.stderr.split('\n') }}"
